{"version":3,"file":"gr-forms.js","sources":["ng://gr-forms/lib/control-binder.ts","ng://gr-forms/lib/build-models/abstract.ts","ng://gr-forms/lib/build-models/control.ts","ng://gr-forms/lib/typed-forms/gr-form-array.ts","ng://gr-forms/lib/build-models/array.ts","ng://gr-forms/lib/typed-forms/gr-form-group.ts","ng://gr-forms/lib/build-models/group.ts","ng://gr-forms/lib/gr-builder.ts","ng://gr-forms/public-api.ts","ng://gr-forms/gr-forms.ts"],"sourcesContent":["import { Observable } from 'rxjs';\nimport { FormArray, FormControl, FormGroup } from '@angular/forms';\nimport {FormDisable, FormDisableOptions, ValueOverride} from './build-models/abstract';\n\nexport abstract class ControlBinder {\n\n  public static setUpSubscriptions(\n    options: { disabled?: Observable<FormDisable>, valueOverride?: Observable<ValueOverride> },\n    control: FormArray | FormGroup | FormControl\n  ) {\n    if (options.disabled) {\n      options.disabled.subscribe(state => ControlBinder.disabledCallback(state, control));\n    }\n    if (options.valueOverride) {\n      options.valueOverride.subscribe(state => ControlBinder.valueOverrideCallback(state, control));\n    }\n  }\n\n  private static disabledCallback(formDisable: FormDisable, control: FormArray | FormGroup | FormControl): void {\n    const isBoolean = typeof formDisable === 'boolean';\n    const state = isBoolean ? formDisable : (formDisable as FormDisableOptions).enabled;\n    if (control.disabled !== state) {\n      (state ? control.disable : control.enable).bind(control)(isBoolean ? undefined : formDisable as FormDisableOptions);\n    }\n  }\n\n  private static valueOverrideCallback(override: ValueOverride, control: FormArray | FormGroup | FormControl): void {\n    control.setValue(override.value, override.options);\n  }\n\n}\n","import {AbstractControlOptions, AsyncValidatorFn, ValidatorFn} from '@angular/forms';\nimport {Observable} from 'rxjs';\n\nexport type FormValidators = ValidatorFn | ValidatorFn[] | AbstractControlOptions | null;\nexport type AsyncFormValidators = AsyncValidatorFn | AsyncValidatorFn[] | null;\n\nexport interface FormDisableOptions {\n  enabled: boolean;\n  onlySelf?: boolean;\n  emitEvent?: boolean;\n}\nexport type FormDisable = boolean | FormDisableOptions;\n\n\nexport interface ValueOverride {\n  value: any;\n  options?: {\n    onlySelf?: boolean;\n    emitEvent?: boolean;\n    emitModelToViewChange?: boolean;\n    emitViewToModelChange?: boolean;\n  };\n}\n\nexport interface Options {\n  validators?: FormValidators;\n  asyncValidators?: AsyncFormValidators;\n  disabler?: Observable<FormDisable>;\n  valueOverrider?: Observable<ValueOverride>;\n}\n\nexport abstract class GrAbstract {\n  protected readonly validators: FormValidators;\n  protected readonly asyncValidators: AsyncFormValidators;\n  protected readonly disabled: Observable<FormDisable>;\n  protected readonly valueOverride: Observable<ValueOverride>;\n\n  public constructor(options: Options) {\n    this.validators = options ? options.validators : [];\n    this.asyncValidators = options ? options.asyncValidators : [];\n    this.disabled = options ? options.disabler : null;\n    this.valueOverride = options ? options.valueOverrider : null;\n  }\n}\n","import {FormControl} from '@angular/forms';\nimport {ControlBinder} from '../control-binder';\nimport {GrAbstract, Options} from './abstract';\n\nexport class GrControl extends GrAbstract {\n  public constructor(public readonly value: any, options?: Options) {\n    super(options);\n  }\n\n  public buildControl(): FormControl {\n    const control = new FormControl(this.value || null, this.validators, this.asyncValidators);\n    ControlBinder.setUpSubscriptions(\n      {\n        disabled: this.disabled,\n        valueOverride: this.valueOverride\n      },\n      control\n    );\n    return control;\n  }\n}\n","import {AbstractControl, FormArray} from '@angular/forms';\n\n/**\n * GrFormArray\n * an angular FormArray class that provides strong typed getters for controls and value\n */\nexport class GrFormArray<ControlType extends AbstractControl, ValueType extends any = any> extends FormArray {\n\n  /**\n   * same as FormArray.controls with better type safety\n   */\n  public get grControls(): ControlType[] {\n    return this.controls as ControlType[]\n  }\n\n  /**\n   * same as FormArray.value with better type safety\n   */\n  public get grValue(): ValueType[] {\n    return this.value;\n  }\n\n}\n","import {AbstractControl} from '@angular/forms';\nimport {GrFormArray} from '../typed-forms/gr-form-array';\nimport {ControlBinder} from '../control-binder';\nimport {GrAbstract, Options} from './abstract';\n\nexport class GrArray extends GrAbstract {\n  public constructor(\n    public readonly array: any[], options?: Options) {\n    super(options);\n  }\n\n  public buildArray<T extends AbstractControl>(controls: T[]): GrFormArray<T> {\n    const array = new GrFormArray<T>(controls, this.validators, this.asyncValidators);\n    ControlBinder.setUpSubscriptions(\n      {\n        disabled: this.disabled,\n        valueOverride: this.valueOverride\n      },\n      array\n    );\n    return array;\n  }\n}\n","import {GroupControls} from './group-controls';\nimport {FormGroup} from '@angular/forms';\n\n/**\n * GrFormGroup\n * an angular FormGroup class that provides strong typed getters for controls and value\n */\nexport class GrFormGroup<\n  ControlType extends GroupControls = GroupControls,\n  ValueType extends { [ key in keyof ControlType ]: any } = { [ key in keyof ControlType ]: any }\n  > extends FormGroup {\n\n  public get grControls(): ControlType {\n    return this.controls as ControlType;\n  }\n\n  public get grValue(): ValueType  {\n    return this.value as ValueType;\n  }\n\n}\n","import { GroupControls } from '../typed-forms/group-controls';\nimport { GrFormGroup } from '../typed-forms/gr-form-group';\nimport { ControlBinder } from '../control-binder';\nimport { GrAbstract, Options } from './abstract';\n\nexport class GrGroup extends GrAbstract {\n  public constructor(public readonly group: {[key: string]: any}, options?: Options) {\n    super(options);\n  }\n\n  public buildGroup<T extends GroupControls>(controls: T): GrFormGroup<T> {\n    const group = new GrFormGroup<T>(controls, this.validators, this.asyncValidators);\n    ControlBinder.setUpSubscriptions(\n      {\n        disabled: this.disabled,\n        valueOverride: this.valueOverride\n      },\n      group\n    );\n    return group;\n  }\n}\n","import { AbstractControl, FormArray, FormControl, FormGroup } from '@angular/forms';\nimport { Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\nimport { isEqual } from 'lodash';\nimport { GrControl } from './build-models/control';\nimport { GrArray } from './build-models/array';\nimport { GrAbstract } from './build-models/abstract';\nimport { GrGroup } from './build-models/group';\n\nexport class GrBuilder<FORM_MODEL extends AbstractControl = AbstractControl, VALUE_MODEL = any> {\n  private readonly valuesSubject: Subject<VALUE_MODEL>;\n  private form: FORM_MODEL;\n\n  public get values$(): Observable<VALUE_MODEL> {\n    return this.valuesSubject.asObservable()\n      .pipe(distinctUntilChanged(isEqual));\n  }\n\n  public constructor() {\n    this.valuesSubject = new Subject<VALUE_MODEL>();\n  }\n\n  public buildForm(data: GrAbstract): FORM_MODEL {\n    this.form = this.recursiveBuild(data) as FORM_MODEL;\n    this.valuesSubject.next(this.form.value);\n    this.form.valueChanges.subscribe(values => this.valuesSubject.next(values));\n\n    return this.form;\n  }\n\n  public createSelector<T>(projector: (values: VALUE_MODEL, form?: FORM_MODEL) => T): Observable<T> {\n    return this.values$.pipe(\n      map((value) => projector(value, this.form)),\n      distinctUntilChanged(isEqual)\n    );\n  }\n\n  private recursiveBuild(data: GrAbstract): AbstractControl {\n    if (GrControl[Symbol.hasInstance](data)) {\n      // hermes form Control\n\n      const options: GrControl = data as GrControl;\n      return options.buildControl();\n\n    } else if (GrArray[Symbol.hasInstance](data)) {\n      // hermes form array\n\n      const options: GrArray = data as GrArray;\n      return options.buildArray([...options.array].map(item => this.recursiveBuild(item)));\n\n    } else if (GrGroup[Symbol.hasInstance](data)) {\n      // hermes form group options\n\n      const options: GrGroup = data as GrGroup;\n      const controls: {[key: string]: AbstractControl} = {};\n      Object.keys(options.group).forEach(key => {\n        controls[key] = this.recursiveBuild(data[key]);\n      });\n      return options.buildGroup(controls);\n\n    } else if (Array.isArray(data)) {\n      // normal form aray witout any options\n\n      return new FormArray([...data].map(item => this.recursiveBuild(item)));\n\n    } else if (typeof data === 'object' && data !== null && data !== undefined) {\n      // normal form group without any options\n\n      const controls: {[key: string]: AbstractControl} = {};\n      Object.keys(data).forEach(key => {\n        controls[key] = this.recursiveBuild(data[key]);\n      });\n      const options: GrGroup = data as GrGroup;\n      return new FormGroup(controls);\n\n   } else {\n        // normal form control without any options\n\n        return new FormControl(data);\n    }\n  }\n}\n","/*\n * Public API Surface of gr-forms\n */\n\nexport * from './lib/gr-builder';\nexport * from './lib/control-binder';\n\n/**\n * typed data type\n */\nexport * from './lib/typed-forms/group-controls';\nexport * from './lib/typed-forms/gr-form-group';\nexport * from './lib/typed-forms/gr-form-array';\n\n/**\n * build models\n */\nexport * from './lib/build-models/abstract';\nexport * from './lib/build-models/group';\nexport * from './lib/build-models/array';\nexport * from './lib/build-models/control';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;;;;;;IAIA;KA0BC;IAxBe,gCAAkB,GAAhC,UACE,OAA0F,EAC1F,OAA4C;QAE5C,IAAI,OAAO,CAAC,QAAQ,EAAE;YACpB,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAA,KAAK,IAAI,OAAA,aAAa,CAAC,gBAAgB,CAAC,KAAK,EAAE,OAAO,CAAC,GAAA,CAAC,CAAC;SACrF;QACD,IAAI,OAAO,CAAC,aAAa,EAAE;YACzB,OAAO,CAAC,aAAa,CAAC,SAAS,CAAC,UAAA,KAAK,IAAI,OAAA,aAAa,CAAC,qBAAqB,CAAC,KAAK,EAAE,OAAO,CAAC,GAAA,CAAC,CAAC;SAC/F;KACF;IAEc,8BAAgB,GAA/B,UAAgC,WAAwB,EAAE,OAA4C;QACpG,IAAM,SAAS,GAAG,OAAO,WAAW,KAAK,SAAS,CAAC;QACnD,IAAM,KAAK,GAAG,SAAS,GAAG,WAAW,GAAI,WAAkC,CAAC,OAAO,CAAC;QACpF,IAAI,OAAO,CAAC,QAAQ,KAAK,KAAK,EAAE;YAC9B,CAAC,KAAK,GAAG,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC,SAAS,GAAG,SAAS,GAAG,WAAiC,CAAC,CAAC;SACrH;KACF;IAEc,mCAAqB,GAApC,UAAqC,QAAuB,EAAE,OAA4C;QACxG,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;KACpD;IAEH,oBAAC;AAAD,CAAC;;;ICOC,oBAAmB,OAAgB;QACjC,IAAI,CAAC,UAAU,GAAG,OAAO,GAAG,OAAO,CAAC,UAAU,GAAG,EAAE,CAAC;QACpD,IAAI,CAAC,eAAe,GAAG,OAAO,GAAG,OAAO,CAAC,eAAe,GAAG,EAAE,CAAC;QAC9D,IAAI,CAAC,QAAQ,GAAG,OAAO,GAAG,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC;QAClD,IAAI,CAAC,aAAa,GAAG,OAAO,GAAG,OAAO,CAAC,cAAc,GAAG,IAAI,CAAC;KAC9D;IACH,iBAAC;AAAD,CAAC;;;ICvC8B,6BAAU;IACvC,mBAAmC,KAAU,EAAE,OAAiB;QAAhE,YACE,kBAAM,OAAO,CAAC,SACf;QAFkC,WAAK,GAAL,KAAK,CAAK;;KAE5C;IAEM,gCAAY,GAAnB;QACE,IAAM,OAAO,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QAC3F,aAAa,CAAC,kBAAkB,CAC9B;YACE,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,aAAa,EAAE,IAAI,CAAC,aAAa;SAClC,EACD,OAAO,CACR,CAAC;QACF,OAAO,OAAO,CAAC;KAChB;IACH,gBAAC;AAAD,CAhBA,CAA+B,UAAU;;ACFzC;;;;AAIA;IAAmG,+BAAS;IAA5G;;KAgBC;IAXC,sBAAW,mCAAU;;;;aAArB;YACE,OAAO,IAAI,CAAC,QAAyB,CAAA;SACtC;;;OAAA;IAKD,sBAAW,gCAAO;;;;aAAlB;YACE,OAAO,IAAI,CAAC,KAAK,CAAC;SACnB;;;OAAA;IAEH,kBAAC;AAAD,CAhBA,CAAmG,SAAS;;;ICD/E,2BAAU;IACrC,iBACkB,KAAY,EAAE,OAAiB;QADjD,YAEE,kBAAM,OAAO,CAAC,SACf;QAFiB,WAAK,GAAL,KAAK,CAAO;;KAE7B;IAEM,4BAAU,GAAjB,UAA6C,QAAa;QACxD,IAAM,KAAK,GAAG,IAAI,WAAW,CAAI,QAAQ,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QAClF,aAAa,CAAC,kBAAkB,CAC9B;YACE,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,aAAa,EAAE,IAAI,CAAC,aAAa;SAClC,EACD,KAAK,CACN,CAAC;QACF,OAAO,KAAK,CAAC;KACd;IACH,cAAC;AAAD,CAjBA,CAA6B,UAAU;;ACFvC;;;;AAIA;IAGY,+BAAS;IAHrB;;KAaC;IARC,sBAAW,mCAAU;aAArB;YACE,OAAO,IAAI,CAAC,QAAuB,CAAC;SACrC;;;OAAA;IAED,sBAAW,gCAAO;aAAlB;YACE,OAAO,IAAI,CAAC,KAAkB,CAAC;SAChC;;;OAAA;IAEH,kBAAC;AAAD,CAbA,CAGY,SAAS;;;ICLQ,2BAAU;IACrC,iBAAmC,KAA2B,EAAE,OAAiB;QAAjF,YACE,kBAAM,OAAO,CAAC,SACf;QAFkC,WAAK,GAAL,KAAK,CAAsB;;KAE7D;IAEM,4BAAU,GAAjB,UAA2C,QAAW;QACpD,IAAM,KAAK,GAAG,IAAI,WAAW,CAAI,QAAQ,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QAClF,aAAa,CAAC,kBAAkB,CAC9B;YACE,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,aAAa,EAAE,IAAI,CAAC,aAAa;SAClC,EACD,KAAK,CACN,CAAC;QACF,OAAO,KAAK,CAAC;KACd;IACH,cAAC;AAAD,CAhBA,CAA6B,UAAU;;;ICarC;QACE,IAAI,CAAC,aAAa,GAAG,IAAI,OAAO,EAAe,CAAC;KACjD;IAPD,sBAAW,8BAAO;aAAlB;YACE,OAAO,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE;iBACrC,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC,CAAC;SACxC;;;OAAA;IAMM,6BAAS,GAAhB,UAAiB,IAAgB;QAAjC,iBAMC;QALC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAe,CAAC;QACpD,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,GAAA,CAAC,CAAC;QAE5E,OAAO,IAAI,CAAC,IAAI,CAAC;KAClB;IAEM,kCAAc,GAArB,UAAyB,SAAwD;QAAjF,iBAKC;QAJC,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CACtB,GAAG,CAAC,UAAC,KAAK,IAAK,OAAA,SAAS,CAAC,KAAK,EAAE,KAAI,CAAC,IAAI,CAAC,GAAA,CAAC,EAC3C,oBAAoB,CAAC,OAAO,CAAC,CAC9B,CAAC;KACH;IAEO,kCAAc,GAAtB,UAAuB,IAAgB;QAAvC,iBA2CC;QA1CC,IAAI,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,EAAE;;YAGvC,IAAM,OAAO,GAAc,IAAiB,CAAC;YAC7C,OAAO,OAAO,CAAC,YAAY,EAAE,CAAC;SAE/B;aAAM,IAAI,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,EAAE;;YAG5C,IAAM,OAAO,GAAY,IAAe,CAAC;YACzC,OAAO,OAAO,CAAC,UAAU,CAAC,SAAI,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,GAAA,CAAC,CAAC,CAAC;SAEtF;aAAM,IAAI,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,EAAE;;YAG5C,IAAM,OAAO,GAAY,IAAe,CAAC;YACzC,IAAM,UAAQ,GAAqC,EAAE,CAAC;YACtD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;gBACpC,UAAQ,CAAC,GAAG,CAAC,GAAG,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;aAChD,CAAC,CAAC;YACH,OAAO,OAAO,CAAC,UAAU,CAAC,UAAQ,CAAC,CAAC;SAErC;aAAM,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;;YAG9B,OAAO,IAAI,SAAS,CAAC,SAAI,IAAI,EAAE,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,GAAA,CAAC,CAAC,CAAC;SAExE;aAAM,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,SAAS,EAAE;;YAG1E,IAAM,UAAQ,GAAqC,EAAE,CAAC;YACtD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;gBAC3B,UAAQ,CAAC,GAAG,CAAC,GAAG,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;aAChD,CAAC,CAAC;YACH,IAAM,OAAO,GAAY,IAAe,CAAC;YACzC,OAAO,IAAI,SAAS,CAAC,UAAQ,CAAC,CAAC;SAEjC;aAAM;;YAGF,OAAO,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC;SAChC;KACF;IACH,gBAAC;AAAD,CAAC;;ACjFD;;GAEG;;ACFH;;GAEG;;;;"}