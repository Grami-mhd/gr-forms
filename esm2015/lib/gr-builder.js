import { FormArray, FormControl, FormGroup } from '@angular/forms';
import { Subject } from 'rxjs';
import { distinctUntilChanged, map } from 'rxjs/operators';
import { isEqual } from 'lodash';
import { GrControl } from './build-models/control';
import { GrArray } from './build-models/array';
import { GrGroup } from './build-models/group';
export class GrBuilder {
    constructor() {
        this.valuesSubject = new Subject();
    }
    get values$() {
        return this.valuesSubject.asObservable()
            .pipe(distinctUntilChanged(isEqual));
    }
    buildForm(data) {
        this.form = this.recursiveBuild(data);
        this.valuesSubject.next(this.form.value);
        this.form.valueChanges.subscribe(values => this.valuesSubject.next(values));
        return this.form;
    }
    createSelector(projector) {
        return this.values$.pipe(map((value) => projector(value, this.form)), distinctUntilChanged(isEqual));
    }
    recursiveBuild(data) {
        if (GrControl[Symbol.hasInstance](data)) {
            // hermes form Control
            const options = data;
            return options.buildControl();
        }
        else if (GrArray[Symbol.hasInstance](data)) {
            // hermes form array
            const options = data;
            return options.buildArray([...options.array].map(item => this.recursiveBuild(item)));
        }
        else if (GrGroup[Symbol.hasInstance](data)) {
            // hermes form group options
            const options = data;
            const controls = {};
            Object.keys(options.group).forEach(key => {
                controls[key] = this.recursiveBuild(data[key]);
            });
            return options.buildGroup(controls);
        }
        else if (Array.isArray(data)) {
            // normal form aray witout any options
            return new FormArray([...data].map(item => this.recursiveBuild(item)));
        }
        else if (typeof data === 'object' && data !== null && data !== undefined) {
            // normal form group without any options
            const controls = {};
            Object.keys(data).forEach(key => {
                controls[key] = this.recursiveBuild(data[key]);
            });
            const options = data;
            return new FormGroup(controls);
        }
        else {
            // normal form control without any options
            return new FormControl(data);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3ItYnVpbGRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2dyLWZvcm1zLyIsInNvdXJjZXMiOlsibGliL2dyLWJ1aWxkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFtQixTQUFTLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3BGLE9BQU8sRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDM0MsT0FBTyxFQUFFLG9CQUFvQixFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDakMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ25ELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUUvQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFL0MsTUFBTSxPQUFPLFNBQVM7SUFTcEI7UUFDRSxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksT0FBTyxFQUFlLENBQUM7SUFDbEQsQ0FBQztJQVBELElBQVcsT0FBTztRQUNoQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFO2FBQ3JDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFNTSxTQUFTLENBQUMsSUFBZ0I7UUFDL0IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBZSxDQUFDO1FBQ3BELElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDekMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUU1RSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDbkIsQ0FBQztJQUVNLGNBQWMsQ0FBSSxTQUF3RDtRQUMvRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUN0QixHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQzNDLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUM5QixDQUFDO0lBQ0osQ0FBQztJQUVPLGNBQWMsQ0FBQyxJQUFnQjtRQUNyQyxJQUFJLFNBQVMsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdkMsc0JBQXNCO1lBRXRCLE1BQU0sT0FBTyxHQUFjLElBQWlCLENBQUM7WUFDN0MsT0FBTyxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUM7U0FFL0I7YUFBTSxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDNUMsb0JBQW9CO1lBRXBCLE1BQU0sT0FBTyxHQUFZLElBQWUsQ0FBQztZQUN6QyxPQUFPLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUV0RjthQUFNLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUM1Qyw0QkFBNEI7WUFFNUIsTUFBTSxPQUFPLEdBQVksSUFBZSxDQUFDO1lBQ3pDLE1BQU0sUUFBUSxHQUFxQyxFQUFFLENBQUM7WUFDdEQsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUN2QyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNqRCxDQUFDLENBQUMsQ0FBQztZQUNILE9BQU8sT0FBTyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUVyQzthQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUM5QixzQ0FBc0M7WUFFdEMsT0FBTyxJQUFJLFNBQVMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FFeEU7YUFBTSxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsSUFBSSxJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxTQUFTLEVBQUU7WUFDMUUsd0NBQXdDO1lBRXhDLE1BQU0sUUFBUSxHQUFxQyxFQUFFLENBQUM7WUFDdEQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQzlCLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ2pELENBQUMsQ0FBQyxDQUFDO1lBQ0gsTUFBTSxPQUFPLEdBQVksSUFBZSxDQUFDO1lBQ3pDLE9BQU8sSUFBSSxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7U0FFakM7YUFBTTtZQUNGLDBDQUEwQztZQUUxQyxPQUFPLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2hDO0lBQ0gsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sLCBGb3JtQXJyYXksIEZvcm1Db250cm9sLCBGb3JtR3JvdXAgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBkaXN0aW5jdFVudGlsQ2hhbmdlZCwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgaXNFcXVhbCB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBHckNvbnRyb2wgfSBmcm9tICcuL2J1aWxkLW1vZGVscy9jb250cm9sJztcbmltcG9ydCB7IEdyQXJyYXkgfSBmcm9tICcuL2J1aWxkLW1vZGVscy9hcnJheSc7XG5pbXBvcnQgeyBHckFic3RyYWN0IH0gZnJvbSAnLi9idWlsZC1tb2RlbHMvYWJzdHJhY3QnO1xuaW1wb3J0IHsgR3JHcm91cCB9IGZyb20gJy4vYnVpbGQtbW9kZWxzL2dyb3VwJztcblxuZXhwb3J0IGNsYXNzIEdyQnVpbGRlcjxGT1JNX01PREVMIGV4dGVuZHMgQWJzdHJhY3RDb250cm9sID0gQWJzdHJhY3RDb250cm9sLCBWQUxVRV9NT0RFTCA9IGFueT4ge1xuICBwcml2YXRlIHJlYWRvbmx5IHZhbHVlc1N1YmplY3Q6IFN1YmplY3Q8VkFMVUVfTU9ERUw+O1xuICBwcml2YXRlIGZvcm06IEZPUk1fTU9ERUw7XG5cbiAgcHVibGljIGdldCB2YWx1ZXMkKCk6IE9ic2VydmFibGU8VkFMVUVfTU9ERUw+IHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZXNTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpXG4gICAgICAucGlwZShkaXN0aW5jdFVudGlsQ2hhbmdlZChpc0VxdWFsKSk7XG4gIH1cblxuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy52YWx1ZXNTdWJqZWN0ID0gbmV3IFN1YmplY3Q8VkFMVUVfTU9ERUw+KCk7XG4gIH1cblxuICBwdWJsaWMgYnVpbGRGb3JtKGRhdGE6IEdyQWJzdHJhY3QpOiBGT1JNX01PREVMIHtcbiAgICB0aGlzLmZvcm0gPSB0aGlzLnJlY3Vyc2l2ZUJ1aWxkKGRhdGEpIGFzIEZPUk1fTU9ERUw7XG4gICAgdGhpcy52YWx1ZXNTdWJqZWN0Lm5leHQodGhpcy5mb3JtLnZhbHVlKTtcbiAgICB0aGlzLmZvcm0udmFsdWVDaGFuZ2VzLnN1YnNjcmliZSh2YWx1ZXMgPT4gdGhpcy52YWx1ZXNTdWJqZWN0Lm5leHQodmFsdWVzKSk7XG5cbiAgICByZXR1cm4gdGhpcy5mb3JtO1xuICB9XG5cbiAgcHVibGljIGNyZWF0ZVNlbGVjdG9yPFQ+KHByb2plY3RvcjogKHZhbHVlczogVkFMVUVfTU9ERUwsIGZvcm0/OiBGT1JNX01PREVMKSA9PiBUKTogT2JzZXJ2YWJsZTxUPiB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWVzJC5waXBlKFxuICAgICAgbWFwKCh2YWx1ZSkgPT4gcHJvamVjdG9yKHZhbHVlLCB0aGlzLmZvcm0pKSxcbiAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKGlzRXF1YWwpXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVjdXJzaXZlQnVpbGQoZGF0YTogR3JBYnN0cmFjdCk6IEFic3RyYWN0Q29udHJvbCB7XG4gICAgaWYgKEdyQ29udHJvbFtTeW1ib2wuaGFzSW5zdGFuY2VdKGRhdGEpKSB7XG4gICAgICAvLyBoZXJtZXMgZm9ybSBDb250cm9sXG5cbiAgICAgIGNvbnN0IG9wdGlvbnM6IEdyQ29udHJvbCA9IGRhdGEgYXMgR3JDb250cm9sO1xuICAgICAgcmV0dXJuIG9wdGlvbnMuYnVpbGRDb250cm9sKCk7XG5cbiAgICB9IGVsc2UgaWYgKEdyQXJyYXlbU3ltYm9sLmhhc0luc3RhbmNlXShkYXRhKSkge1xuICAgICAgLy8gaGVybWVzIGZvcm0gYXJyYXlcblxuICAgICAgY29uc3Qgb3B0aW9uczogR3JBcnJheSA9IGRhdGEgYXMgR3JBcnJheTtcbiAgICAgIHJldHVybiBvcHRpb25zLmJ1aWxkQXJyYXkoWy4uLm9wdGlvbnMuYXJyYXldLm1hcChpdGVtID0+IHRoaXMucmVjdXJzaXZlQnVpbGQoaXRlbSkpKTtcblxuICAgIH0gZWxzZSBpZiAoR3JHcm91cFtTeW1ib2wuaGFzSW5zdGFuY2VdKGRhdGEpKSB7XG4gICAgICAvLyBoZXJtZXMgZm9ybSBncm91cCBvcHRpb25zXG5cbiAgICAgIGNvbnN0IG9wdGlvbnM6IEdyR3JvdXAgPSBkYXRhIGFzIEdyR3JvdXA7XG4gICAgICBjb25zdCBjb250cm9sczoge1trZXk6IHN0cmluZ106IEFic3RyYWN0Q29udHJvbH0gPSB7fTtcbiAgICAgIE9iamVjdC5rZXlzKG9wdGlvbnMuZ3JvdXApLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgY29udHJvbHNba2V5XSA9IHRoaXMucmVjdXJzaXZlQnVpbGQoZGF0YVtrZXldKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG9wdGlvbnMuYnVpbGRHcm91cChjb250cm9scyk7XG5cbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgIC8vIG5vcm1hbCBmb3JtIGFyYXkgd2l0b3V0IGFueSBvcHRpb25zXG5cbiAgICAgIHJldHVybiBuZXcgRm9ybUFycmF5KFsuLi5kYXRhXS5tYXAoaXRlbSA9PiB0aGlzLnJlY3Vyc2l2ZUJ1aWxkKGl0ZW0pKSk7XG5cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSAnb2JqZWN0JyAmJiBkYXRhICE9PSBudWxsICYmIGRhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gbm9ybWFsIGZvcm0gZ3JvdXAgd2l0aG91dCBhbnkgb3B0aW9uc1xuXG4gICAgICBjb25zdCBjb250cm9sczoge1trZXk6IHN0cmluZ106IEFic3RyYWN0Q29udHJvbH0gPSB7fTtcbiAgICAgIE9iamVjdC5rZXlzKGRhdGEpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgY29udHJvbHNba2V5XSA9IHRoaXMucmVjdXJzaXZlQnVpbGQoZGF0YVtrZXldKTtcbiAgICAgIH0pO1xuICAgICAgY29uc3Qgb3B0aW9uczogR3JHcm91cCA9IGRhdGEgYXMgR3JHcm91cDtcbiAgICAgIHJldHVybiBuZXcgRm9ybUdyb3VwKGNvbnRyb2xzKTtcblxuICAgfSBlbHNlIHtcbiAgICAgICAgLy8gbm9ybWFsIGZvcm0gY29udHJvbCB3aXRob3V0IGFueSBvcHRpb25zXG5cbiAgICAgICAgcmV0dXJuIG5ldyBGb3JtQ29udHJvbChkYXRhKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==